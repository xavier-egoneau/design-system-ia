<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <title>{{ title }} - DEBUG</title>
  <link rel="stylesheet" href="/css/main.css" />
  <style>
    body { font-family: sans-serif; margin: 2rem; }
    .debug-container { display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; }
    .debug-section { border: 1px solid #ccc; padding: 1rem; }
    .code-display { background: #f5f5f5; padding: 1rem; white-space: pre; font-family: monospace; }
  </style>
</head>
<body>
  <h1>{{ title }} - Mode Debug</h1>
  
  <div class="debug-container">
    <div class="debug-section">
      <h2>Aper√ßu</h2>
      <div id="component-render">{{ content|raw }}</div>
    </div>
    
    <div class="debug-section">
      <h2>Code HTML</h2>
      <div id="code-display" class="code-display">En attente...</div>
    </div>
  </div>
  
  <div class="debug-section">
    <h2>Contr√¥les</h2>
    <form id="component-form"></form>
  </div>

  <script>
    window.componentConfig = {
      name: "{{ componentName }}",
      templatePath: "{{ templatePath }}",
      variables: {{ componentVariables|raw }},
      variants: {{ componentVariants|raw }}
    };
  </script>
  
  <script>
    // JavaScript ultra-simple pour debug
    let currentProps = {};
    
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üîç DEBUG: Starting...');
      generateForm();
      loadDefaults();
    });
    
    function generateForm() {
      const form = document.getElementById('component-form');
      const variables = window.componentConfig.variables || {};
      
      Object.entries(variables).forEach(function([key, config]) {
        const div = document.createElement('div');
        div.style.marginBottom = '1rem';
        
        const label = document.createElement('label');
        label.textContent = key + ': ';
        
        let input;
        if (config.enum) {
          input = document.createElement('select');
          config.enum.forEach(function(option) {
            const opt = document.createElement('option');
            opt.value = option;
            opt.textContent = option;
            input.appendChild(opt);
          });
        } else {
          input = document.createElement('input');
          input.type = config.type === 'boolean' ? 'checkbox' : 'text';
          input.value = config.default || '';
        }
        
        input.id = key;
        input.addEventListener('change', updateComponent);
        
        div.appendChild(label);
        div.appendChild(input);
        form.appendChild(div);
      });
    }
    
    function loadDefaults() {
      const variables = window.componentConfig.variables || {};
      Object.entries(variables).forEach(function([key, config]) {
        currentProps[key] = config.default;
      });
      updateComponent();
    }
    
    function updateComponent() {
      console.log('üîÑ DEBUG: Updating component...');
      
      // Collecter les props
      Object.entries(window.componentConfig.variables || {}).forEach(function([key, config]) {
        const input = document.getElementById(key);
        if (input) {
          if (input.type === 'checkbox') {
            currentProps[key] = input.checked;
          } else {
            currentProps[key] = input.value || config.default || '';
          }
        }
      });
      
      console.log('üì¶ DEBUG: Props:', currentProps);
      
      // Appel API
      fetch('http://localhost:3001/api/render-component', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          template: window.componentConfig.templatePath,
          props: currentProps
        })
      })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        console.log('‚úÖ DEBUG: Received data:', data);
        
        // Mettre √† jour l'aper√ßu
        document.getElementById('component-render').innerHTML = data.html;
        
        // Mettre √† jour le code - SANS AUCUNE MODIFICATION
        document.getElementById('code-display').textContent = data.code;
        
        console.log('üìù DEBUG: Code set to:', data.code);
      })
      .catch(function(error) {
        console.error('‚ùå DEBUG: Error:', error);
      });
    }
  </script>
</body>
</html>