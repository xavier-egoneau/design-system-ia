<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{ title }}</title>
  <link rel="stylesheet" href="/css/app.css">
  
  {# Prism.js avec th√®me sombre #}
  <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
  
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
      margin: 0;
      background: #f8f9fa;
    }
    
    .demo-container {
      margin: 0 auto;
      padding: 2rem;
    }
    
    .demo-header {
      background: white;
      padding: 1.5rem;
      border-radius: 8px;
      margin-bottom: 2rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .demo-header h1 {
      margin: 0 0 0.5rem 0;
      color: #212529;
    }
    
    .demo-header .meta {
      color: #6c757d;
      font-size: 0.9rem;
    }
    
    .demo-main {
      display: grid;
      grid-template-columns: 1fr 350px;
      gap: 2rem;
      align-items: start;
    }
    
    .demo-content {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .demo-section {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .section-header {
      padding: 1rem 1.5rem;
      background: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
    }
    
    .section-title {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: #495057;
    }
    
    .section-content {
      padding: 2rem;
    }
    
    /* Section preview avec encadr√© */
    .preview-content {
      border: 2px solid #e9ecef;
      border-radius: 8px;
      padding: 2rem;
      background: #fff;
      min-height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .component-iframe {
      width: 100%;
      border: none;
      min-height: 300px;
      background: transparent;
      border-radius: 4px;
    }
    
    /* Section code - Style Bootstrap */
    .code-container {
      position: relative;
      background: #1e1e1e;
      border-radius: 12px;
      overflow: hidden;
      border: 1px solid #333;
    }
    
    .code-block {
      margin: 0;
      padding: 1.5rem;
      background: transparent !important;
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
      font-size: 0.875rem;
      line-height: 1.6;
      overflow-x: auto;
      white-space: pre;
      border: none;
      color: #d4d4d4;
    }
    
    /* Supprimer le overflow auto de Prism.js */
    pre[class*="language-"] {
      overflow: visible !important;
    }
    
    /* Am√©lioration de la coloration pour ressembler √† Bootstrap */
    .code-block .token.tag {
      color: #569cd6;
    }
    
    .code-block .token.attr-name {
      color: #92c5f7;
    }
    
    .code-block .token.attr-value {
      color: #ce9178;
    }
    
    .code-block .token.punctuation {
      color: #808080;
    }
    
    .code-block .token.string {
      color: #ce9178;
    }
    
    .copy-btn {
      position: absolute;
      top: 12px;
      right: 12px;
      background: #404040;
      color: #d4d4d4;
      border: 1px solid #555;
      padding: 0.4rem 0.8rem;
      font-size: 0.75rem;
      border-radius: 6px;
      cursor: pointer;
      opacity: 0.8;
      transition: all 0.2s;
      font-family: inherit;
    }
    
    .copy-btn:hover {
      opacity: 1;
      background: #505050;
      border-color: #666;
    }
    
    .copy-btn.copied {
      background: #28a745;
      border-color: #28a745;
      color: white;
    }
    
    .demo-controls {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      position: sticky;
      top: 2rem;
    }
    
    .controls-header {
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #dee2e6;
    }
    
    .controls-title {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: #495057;
    }
    
    .controls-subtitle {
      color: #6c757d;
      font-size: 0.85rem;
      margin: 0.5rem 0 0 0;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: #495057;
      font-size: 0.9rem;
    }
    
    .form-control {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 0.9rem;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
      box-sizing: border-box;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #80bdff;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .form-check {
      display: flex;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .form-check-input {
      margin-right: 0.5rem;
    }
    
    .back-link {
      display: inline-block;
      margin-bottom: 1rem;
      padding: 0.5rem 1rem;
      background: #007bff;
      color: white;
      text-decoration: none;
      border-radius: 4px;
      font-size: 0.9rem;
    }
    
    .back-link:hover {
      background: #0056b3;
      color: white;
      text-decoration: none;
    }
    
    @media (max-width: 768px) {
      .demo-main {
        grid-template-columns: 1fr;
      }
      
      .demo-controls {
        position: static;
      }
    }
  </style>
</head>
<body>
  <div class="demo-container">
    <header class="demo-header">
      <a href="/{{ componentCategory }}/index.html" class="back-link">‚Üê Retour √† {{ componentCategory }}</a>
      <h1>{{ title }}</h1>
      <div class="meta">
        {{ componentType|capitalize }} ‚Ä¢ {{ framework.name|default('Framework') }} ‚Ä¢ Playground interactif
      </div>
    </header>
    
    <div class="demo-main">
      <div class="demo-content">
        <!-- Section Aper√ßu -->
        <div class="demo-section">
          <div class="section-header">
            <h2 class="section-title">Aper√ßu</h2>
          </div>
          <div class="section-content">
            <div class="preview-content">
              <iframe 
                id="component-iframe"
                src="/{{ componentCategory }}/render/{{ componentName }}.html"
                class="component-iframe"
                title="Rendu isol√© du composant {{ componentName }}"
              ></iframe>
            </div>
          </div>
        </div>
        
        <!-- Section Code HTML -->
        <div class="demo-section">
          <div class="section-header">
            <h2 class="section-title">Code HTML</h2>
          </div>
          <div class="section-content">
            <div class="code-container">
              <button class="copy-btn" onclick="copyCode()">üìã Copier</button>
              <pre><code id="code-display" class="language-html code-block">En attente...</code></pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="demo-controls">
        <div class="controls-header">
          <h3 class="controls-title">Contr√¥les</h3>
          <p class="controls-subtitle">Les modifications sont appliqu√©es automatiquement</p>
        </div>
        
        <form id="component-form">
          <!-- Les contr√¥les seront g√©n√©r√©s automatiquement ici -->
        </form>
      </div>
    </div>
  </div>

  <script>
    window.componentConfig = {
      name: "{{ componentName }}",
      category: "{{ componentCategory }}",
      templatePath: "{{ templatePath }}",
      variables: {{ componentVariables|raw }},
      variants: {{ componentVariants|raw }},
      framework: "{{ framework.name|default('minimal') }}"
    };
  </script>
  
  {# Prism.js pour la coloration syntaxique #}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
  
  <script>
    let currentProps = {};
    
    document.addEventListener('DOMContentLoaded', function() {
      generateForm();
      loadDefaults();
      updateComponent();
    });
    
    function generateForm() {
      const form = document.getElementById('component-form');
      const variables = window.componentConfig.variables || {};
      
      if (Object.keys(variables).length === 0) {
        form.innerHTML = '<p style="color: #6c757d; font-style: italic;">Aucune variable configurable</p>';
        return;
      }
      
      Object.entries(variables).forEach(function([key, config]) {
        const group = document.createElement('div');
        group.className = 'form-group';
        
        const label = document.createElement('label');
        label.className = 'form-label';
        label.textContent = key;
        
        let input;
        
        if (config.type === 'boolean') {
          const wrapper = document.createElement('div');
          wrapper.className = 'form-check';
          
          input = document.createElement('input');
          input.type = 'checkbox';
          input.className = 'form-check-input';
          input.checked = config.default || false;
          
          wrapper.appendChild(input);
          wrapper.appendChild(label);
          group.appendChild(wrapper);
        } else if (config.enum) {
          input = document.createElement('select');
          input.className = 'form-control';
          
          config.enum.forEach(function(option) {
            const opt = document.createElement('option');
            opt.value = option;
            opt.textContent = option;
            opt.selected = option === config.default;
            input.appendChild(opt);
          });
          
          group.appendChild(label);
          group.appendChild(input);
        } else {
          input = document.createElement('input');
          input.className = 'form-control';
          input.type = 'text';
          input.value = config.default || '';
          
          group.appendChild(label);
          group.appendChild(input);
        }
        
        input.id = key;
        input.addEventListener('change', updateComponent);
        input.addEventListener('input', updateComponent);
        
        form.appendChild(group);
      });
    }
    
    function loadDefaults() {
      const variables = window.componentConfig.variables || {};
      Object.entries(variables).forEach(function([key, config]) {
        currentProps[key] = config.default;
      });
    }
    
    function updateComponent() {
      Object.entries(window.componentConfig.variables || {}).forEach(function([key, config]) {
        const input = document.getElementById(key);
        if (input) {
          if (config.type === 'boolean') {
            currentProps[key] = input.checked;
          } else {
            currentProps[key] = input.value || config.default || '';
          }
        }
      });
      
      fetch('http://localhost:3001/api/render-component', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          template: window.componentConfig.templatePath,
          props: currentProps
        })
      })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        // Mettre √† jour l'iframe avec le HTML rendu
        const iframe = document.getElementById('component-iframe');
        if (iframe && iframe.contentWindow) {
          iframe.contentWindow.postMessage({
            type: 'UPDATE_COMPONENT',
            html: data.html  // Envoyer le HTML directement
          }, '*');
        }
        
        // Mettre √† jour le code avec coloration syntaxique
        const codeDisplay = document.getElementById('code-display');
        if (codeDisplay) {
          // Formater le HTML avec indentation propre
          const formattedCode = formatHTML(data.code);
          codeDisplay.textContent = formattedCode;
          
          // R√©appliquer la coloration syntaxique
          if (window.Prism) {
            Prism.highlightElement(codeDisplay);
          }
        }
      })
      .catch(function(error) {
        console.error('Erreur:', error);
      });
    }
    
    function copyCode() {
      const codeElement = document.getElementById('code-display');
      const button = document.querySelector('.copy-btn');
      
      if (codeElement && navigator.clipboard) {
        navigator.clipboard.writeText(codeElement.textContent).then(function() {
          const originalText = button.textContent;
          button.textContent = '‚úÖ Copi√© !';
          button.classList.add('copied');
          
          setTimeout(function() {
            button.textContent = originalText;
            button.classList.remove('copied');
          }, 2000);
        }).catch(function(err) {
          console.error('Erreur lors de la copie:', err);
        });
      }
    }
    
    // Fonction pour formater le HTML avec indentation
    function formatHTML(html) {
      let formatted = '';
      let indent = 0;
      const tab = '  '; // 2 espaces
      
      const parts = html.split(/>\s*</);
      
      parts.forEach(function(element, index) {
        if (index > 0) {
          element = '<' + element;
        }
        if (index < parts.length - 1) {
          element = element + '>';
        }
        
        // Diminuer l'indentation pour les balises fermantes
        if (element.match(/^<\/\w/)) {
          indent--;
        }
        
        // Ajouter l'indentation
        formatted += tab.repeat(Math.max(0, indent)) + element + '\n';
        
        // Augmenter l'indentation pour les balises ouvrantes (sauf auto-fermantes)
        if (element.match(/^<\w[^>]*[^\/]>$/)) {
          indent++;
        }
      });
      
      return formatted.trim();
    }
    
    // Message listener pour l'iframe
    window.addEventListener('message', function(event) {
      if (event.data.type === 'IFRAME_READY') {
        updateComponent();
      }
    });
  </script>
</body>
</html>