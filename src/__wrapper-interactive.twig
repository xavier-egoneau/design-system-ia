<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <title>{{ title }}</title>
  <link rel="stylesheet" href="/css/main.css" />
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
      margin: 0;
      background: #f8f9fa;
    }
    
    .demo-container {

      margin: 0 auto;
      padding: 2rem;
    }
    
    .demo-header {
      background: white;
      padding: 1.5rem;
      border-radius: 8px;
      margin-bottom: 2rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .demo-header h1 {
      margin: 0 0 0.5rem 0;
      color: #212529;
    }
    
    .demo-header .meta {
      color: #6c757d;
      font-size: 0.9rem;
    }
    
    .demo-main {
      display: grid;
      grid-template-columns: 1fr 350px;
      gap: 2rem;
      align-items: start;
    }
    
    .demo-preview {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .preview-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
    }
    
    .preview-title {
      font-weight: 600;
      color: #495057;
    }
    
    .view-toggle {
      display: flex;
      border: 1px solid #dee2e6;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .toggle-btn {
      padding: 0.25rem 0.75rem;
      background: white;
      border: none;
      cursor: pointer;
      font-size: 0.8rem;
      transition: all 0.2s;
    }
    
    .toggle-btn.active {
      background: #007bff;
      color: white;
    }
    
    .preview-content {
      padding: 2rem;
      min-height: 200px;
      position: relative;
    }
    
    .code-view {
      display: none;
      background: #f8f9fa;
      padding: 0;
    }
    
    .code-view.active {
      display: block;
    }
    
    .code-block {
      margin: 0;
      padding: 1.5rem;
      background: #f5f5f5;
      color: #333;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 0.875rem;
      line-height: 1.5;
      overflow-x: auto;
      white-space: pre;
      border: none;
    }
    
    .demo-controls {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      position: sticky;
      top: 2rem;
    }
    
    .controls-header {
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #dee2e6;
    }
    
    .controls-title {
      font-weight: 600;
      color: #495057;
      margin: 0 0 0.5rem 0;
    }
    
    .controls-subtitle {
      color: #6c757d;
      font-size: 0.85rem;
      margin: 0;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: #495057;
      font-size: 0.9rem;
    }
    
    .form-control {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 0.9rem;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
      box-sizing: border-box;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #80bdff;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .form-check {
      display: flex;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .form-check-input {
      margin-right: 0.5rem;
    }
    
    @media (max-width: 768px) {
      .demo-main {
        grid-template-columns: 1fr;
      }
      
      .demo-controls {
        position: static;
      }
    }
  </style>
</head>
<body>
  <div class="demo-container">
    <header class="demo-header">
      <h1>{{ title }}</h1>
      <div class="meta">
        {{ componentType|capitalize }} • {{ componentCategory|default('Component') }} • Playground interactif
      </div>
    </header>
    
    <div class="demo-main">
      <div class="demo-preview">
        <div class="preview-header">
          <span class="preview-title">Aperçu</span>
          <div class="view-toggle">
            <button class="toggle-btn active" onclick="switchView('preview')">Rendu</button>
            <button class="toggle-btn" onclick="switchView('code')">HTML</button>
          </div>
        </div>
        
        <div id="preview-content" class="preview-content">
          <div id="component-render">{{ content|raw }}</div>
        </div>
        
        <div id="code-view" class="code-view">
          <div id="code-display" class="code-block">En attente...</div>
        </div>
      </div>
      
      <div class="demo-controls">
        <div class="controls-header">
          <h3 class="controls-title">Contrôles</h3>
          <p class="controls-subtitle">Les modifications sont appliquées automatiquement</p>
        </div>
        
        <form id="component-form">
          <!-- Les contrôles seront générés automatiquement ici -->
        </form>
      </div>
    </div>
  </div>

  <script>
    window.componentConfig = {
      name: "{{ componentName }}",
      category: "{{ componentCategory }}",
      templatePath: "{{ templatePath }}",
      variables: {{ componentVariables|raw }},
      variants: {{ componentVariants|raw }}
    };
    
    // JavaScript ultra-simple inline
    let currentProps = {};
    
    document.addEventListener('DOMContentLoaded', function() {
      generateForm();
      loadDefaults();
    });
    
    function generateForm() {
      const form = document.getElementById('component-form');
      const variables = window.componentConfig.variables || {};
      
      Object.entries(variables).forEach(function([key, config]) {
        const group = document.createElement('div');
        group.className = 'form-group';
        
        const label = document.createElement('label');
        label.className = 'form-label';
        label.textContent = key;
        
        let input;
        
        if (config.type === 'boolean') {
          const wrapper = document.createElement('div');
          wrapper.className = 'form-check';
          
          input = document.createElement('input');
          input.type = 'checkbox';
          input.className = 'form-check-input';
          input.checked = config.default || false;
          
          wrapper.appendChild(input);
          wrapper.appendChild(label);
          group.appendChild(wrapper);
        } else if (config.enum) {
          input = document.createElement('select');
          input.className = 'form-control';
          
          config.enum.forEach(function(option) {
            const opt = document.createElement('option');
            opt.value = option;
            opt.textContent = option;
            opt.selected = option === config.default;
            input.appendChild(opt);
          });
          
          group.appendChild(label);
          group.appendChild(input);
        } else {
          input = document.createElement('input');
          input.className = 'form-control';
          input.type = 'text';
          input.value = config.default || '';
          
          group.appendChild(label);
          group.appendChild(input);
        }
        
        input.id = key;
        input.addEventListener('change', updateComponent);
        input.addEventListener('input', updateComponent);
        
        form.appendChild(group);
      });
    }
    
    function loadDefaults() {
      const variables = window.componentConfig.variables || {};
      Object.entries(variables).forEach(function([key, config]) {
        currentProps[key] = config.default;
      });
      updateComponent();
    }
    
    function updateComponent() {
      Object.entries(window.componentConfig.variables || {}).forEach(function([key, config]) {
        const input = document.getElementById(key);
        if (input) {
          if (config.type === 'boolean') {
            currentProps[key] = input.checked;
          } else {
            currentProps[key] = input.value || config.default || '';
          }
        }
      });
      
      fetch('http://localhost:3001/api/render-component', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          template: window.componentConfig.templatePath,
          props: currentProps
        })
      })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        document.getElementById('component-render').innerHTML = data.html;
        // AUCUNE TRANSFORMATION - affichage direct
        document.getElementById('code-display').textContent = data.code;
      })
      .catch(function(error) {
        console.error('Erreur:', error);
      });
    }
    
    function switchView(view) {
      const preview = document.getElementById('preview-content');
      const code = document.getElementById('code-view');
      const buttons = document.querySelectorAll('.toggle-btn');
      
      buttons.forEach(function(btn) { btn.classList.remove('active'); });
      
      if (view === 'preview') {
        preview.style.display = 'block';
        code.classList.remove('active');
        buttons[0].classList.add('active');
      } else {
        preview.style.display = 'none';
        code.classList.add('active');
        buttons[1].classList.add('active');
      }
    }
    
    // Exposer la fonction pour les boutons
    window.switchView = switchView;
  </script>
</body>
</html>